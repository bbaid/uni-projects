#Напишете програма, която приема десетично число и връща еквивалентното двоично число. 
# Нека десетичното число да е по-малко от 255, 
# така че върнатото двоично число винаги да бъде осем цифри (един октет).

####################################################################################################
# Няколко варианта за програми, които приемат десетично число и връщат еквивалентното двоично число
# Входните десетични числа трябва да са по-малки от 255, така че двоичното число винаги да е октет

# Всички варианти ползват едно и също входящо число
num = int(input("Въведете число за представяне в двоичен вид: ")) 
originalNum = num

# Вариант 1 - с вградената функция bin()

bnum = bin(num)
print("Вариант 1\nБинарното число е:", bnum[2:]) # За да избегнем 0b представката пред бинарното ни число, която функцията bin поставя, използваме слайсинг

# Вариант 2 - с поредни изваждания. Главния недостатък тук е че отнема много време за писане.

num = originalNum # Тъй като всеки вариант променя стойността на num, по този начин запазвам оригиналната стойност
L = []

while num > 255: #Извършваме постоянна проверка дали въведеното число е по-малко от 256
    num = int(input(f"Въведеното число {num} е по-високо от 255 и не може да бъде изчислено. Въведете ново число: "))
else: # Тук съм разписал всички стъпки за да съм сигурен че логиката работи (и защото тъпичък). По-долу е съкратения вариант :>
    if num - 128 >= 0:
        L.append(1)
        num -= 128
    else:
        L.append(0)
        
    if num - 64 >= 0:
        L.append(1)
        num -= 64
    else:
        L.append(0)

    if num - 32 >= 0:
        L.append(1)
        num -= 32
    else:
        L.append(0)

    if num - 16 >= 0:
        L.append(1)
        num -= 16
    else:
        L.append(0)
    
    if num - 8 >= 0:
        L.append(1)
        num -= 8
    else: 
        L.append(0)

    if num - 4 >= 0:
        L.append(1)
        num -= 4
    else:
        L.append(0)
    
    if num - 2 >= 0:
        L.append(1)
        num -= 2
    else:
        L.append(0)
    
    if num - 1 >= 0:
        L.append(1)
    else:
        L.append(0)
print("Вариант 2\nБинарното число е: ", L)

# Вариант 3 - опит за съкращаване на вариант 2 с цикъл

num = originalNum # Тъй като всеки вариант променя стойността на num, по този начин запазвам оригиналната стойност
L = []

while num > 255: 
    num = int(input(f"Въведеното число {num} е по-високо от 255 и не може да бъде изчислено. Въведете ново число: "))
else:
    for i in range(7, -1, -1):
        if num  - (2**i) >= 0:
            L.append("1") # Друга разлика с горния вариант е, че елементите в списъка са стрингове, за да можем да използваме .join метода
            num -= 2**i
        else:
            L.append("0")
print("Вариант 3\nБинарното число е: ","".join(L))